version: '3.7'

services:
   db:
      image: kartoza/postgis:11.0-2.5
      container_name: 'mainPostgres'
      ports:
         - "25434:5432"
      env_file:
         - docker-env/db.env
      restart: on-failure
      healthcheck:
        test: "exit 0"
      volumes:
      - type: volume
        source: pgData # Storage postgis data on host.
        target: /var/lib/postgresql   
        consistency: consistent
      
      
   geoserver:
      container_name: 'geoservertester'
      build: 
         context: ./dockerImages
         dockerfile: geoserver.dockerfile
      volumes:
      -  type: volume
         source: geoserverdata
         target: /opt/geoserver/data_dir/
         consistency: consistent
      ports:
        - "8600:8080"
      restart: on-failure
      env_file:
        - docker-env/geoserver.env
      depends_on:
        - db
      healthcheck:
        test: curl --fail -s http://localhost:8080/ || exit 1
        interval: 1m30s
        timeout: 10s
        retries: 3
   api:
      build:
         context: ./DistributedGeoserverAPI
         dockerfile: pythonApi.dockerfile
      ports:
        - "8000:5000"
      environment:
         WAIT_HOSTS: mainPostgres:5432

   #redis:
   #   image: redis
   #   container_name: redis_visor
   #   environment:
   #      save: ''
   #      requirepass: jYGjFNJg5y7GHjk!

   #mongo:
   #   container_name: some_mongo
   #   image: mongo:4
   #   environment:
   #      MONGO_INITDB_ROOT_USERNAME: root
   #      MONGO_INITDB_ROOT_PASSWORD: example
   #      MONGO_INITDB_DATABASE: visordb
   #   volumes:
   #   -  type: volume
   #      source: mongodata
   #     target: /data/db
   #      consistency: consistent
   #   - ./initmongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
   
   #visor:
   #   image: docker.pkg.github.com/hek23/distributedgeoserver/visor:0.1
   #   ports:
   #      - "80:8080"
      
volumes:
   geoserverdata:
   pgData:
   #mongodata:
